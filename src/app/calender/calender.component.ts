import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { BookingHistory, Guest, WaitList } from '../data/BookingHistory';
import { ButtonModule } from 'primeng/button';
import { TableModule } from 'primeng/table';
import { CommonModule } from '@angular/common';
import { BookingHistoryService } from '../services/booking-history.service';
import { MatTableModule } from '@angular/material/table';
import { FormGroup, FormControl, ReactiveFormsModule, Validators } from '@angular/forms';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatNativeDateModule } from '@angular/material/core';
import { Booking } from '../data/Booking';
import { MatSortModule } from '@angular/material/sort';
import { MatPaginatorModule } from '@angular/material/paginator';
import { MatTableDataSource } from '@angular/material/table';
import { ViewChild } from '@angular/core';
import { MatInputModule } from '@angular/material/input';
import { MatSort } from '@angular/material/sort';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';


@Component({
  selector: 'app-calender',
  imports: [ButtonModule, MatSortModule, MatIconModule, MatButtonModule, TableModule, MatInputModule, CommonModule, MatTableModule, MatDatepickerModule, MatNativeDateModule, MatFormFieldModule, ReactiveFormsModule],
  templateUrl: './calender.component.html',
  styleUrl: './calender.component.scss',
  changeDetection: ChangeDetectionStrategy.Default,
})

export class CalenderComponent implements OnInit {
  onEdit(arg0: any) {
    throw new Error('Method not implemented.');
  }
  onDelete(arg0: any) {
    throw new Error('Method not implemented.');
  }

  displayedColumns: string[] = ['fullName', 'employeeEmail', 'guest', 'startDate', 'endDate', 'actions'];
  dataSource = new MatTableDataSource<Booking>();
  @ViewChild(MatSort) sort!: MatSort;

  booking: Booking[] = []




  busyDates: Date[] = [
    new Date(2025, 5, 25), // May 25, 2025
    new Date(2025, 5, 26), // May 26, 2025
  ];

  bookingForm = new FormGroup({
    fullName: new FormControl('', Validators.required),
    employeeEmail: new FormControl('', [Validators.required, Validators.email]),
    guest: new FormControl(),
    start: new FormControl(),
    end: new FormControl()
  });


  constructor(private bookingHistoryService: BookingHistoryService, private cdr: ChangeDetectorRef) { }

  dateFilter = (date: Date | null): boolean => {
    if (!date) return false;

    const busyDateStrings = this.busyDates.map(d =>
      new Date(d.getFullYear(), d.getMonth(), d.getDate()).toDateString()
    );

    const current = new Date(date.getFullYear(), date.getMonth(), date.getDate()).toDateString();

    return !busyDateStrings.includes(current); // allow only if not busy
  };

  ngOnInit() {
    this.getBookingHistory();
  }

  book() {
    const startDate: Date = this.bookingForm.get('start')?.value;
    const endDate: Date = this.bookingForm.get('end')?.value;

    if (!startDate || !endDate) {
      console.warn("Start or end date is missing");
      return;
    }

    const newBooking = new Booking(
      0, // Assuming ID is auto-generated by the backend
      this.bookingForm.get('employeeEmail')?.value ?? '',
      this.bookingForm.get('fullName')?.value ?? '',
      this.bookingForm.get('guest')?.value ?? '', // <- this is a string now
      startDate.toISOString(),
      endDate.toISOString()
    );
    // console.log('Guest:', booking.guest); // should be 'One', 'Two', etc.
    // Example of formatting:

    const formattedStart = startDate.toISOString().split('T')[0];
    const formattedEnd = endDate.toISOString().split('T')[0];

    this.booking.push(newBooking);

    this.bookingHistoryService.saveBooking(this.booking[0]).subscribe({
      next: () => {
        this.getBookingHistory();
      },
      error: (err) => {
        console.error('Failed to save booking:', err);
      },
    });




    // this.bookingHistoryService.saveBooking(booking)
    //   .subscribe({
    //     next: (savedBooking) => {
    //       console.log('Booking saved:', savedBooking);
    //       this.getBookingHistory(); // Refresh the list
    //     },
    //     error: (err) => {
    //       // console.error('Failed to save booking:', err);
    //     }
    //   });

  }



  ngAfterViewInit() {
    this.dataSource.sort = this.sort;
  }




  // getBookingHistory() {
  //   this.bookingHistoryService.getBookingHistory()
  //     .subscribe(booking => this.booking = booking);
  // }

  getBookingHistory() {
    this.bookingHistoryService.getBookingHistory().subscribe(data => {
      this.dataSource.data = data;
    });
  }


  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value.trim().toLowerCase();
    this.dataSource.filter = filterValue;
  }
}



